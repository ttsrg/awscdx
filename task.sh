#!/bin/bash

#define variables
#AWS_REGION=us-east-1
#AVALAB_ZONE=us-east-1a

# all commands execute under usual bash user

#: '
echo "#1 –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é Amazon VPC."

aws ec2 create-vpc --cidr-block 10.0.0.0/16 --region us-east-1 --output json
#VPCID=$(aws ec2 describe-vpcs --query Vpcs[0].VpcId | sed -e 's/\"//g')
# If "jq"  installed in OS you may use same code's kind - aws ec2 describe-vpcs | jq '.Vpcs[0].VpcId' | tr -d '""'

#echo "VPCID was created = $VPCID"


echo "#2 –î–æ–±–∞–≤–∏—Ç—å ‚Äú test ‚Äù  -—Ç—ç–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π VPC."

aws ec2 create-tags --resources $(aws ec2 describe-vpcs --query Vpcs[0].VpcId | sed -e 's/\"//g') --tags Key=Name,Value=test

echo "#3 –†–∞–∑—Ä–µ—à–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ DNS hostnames –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π VPC."

aws ec2  modify-vpc-attribute --enable-dns-hostnames --vpc-id $(aws ec2 describe-vpcs --query Vpcs[0].VpcId | sed -e 's/\"//g')

#'

echo "#4 –°–æ–∑–¥–∞—Ç—å 2 subnets –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π VPC. –û–¥–∏–Ω subnet –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º(–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞), –≤—Ç–æ—Ä–æ–π - –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º."

aws ec2 create-subnet --vpc-id $VPCID --cidr-block 10.0.1.0/28 --availability-zone us-east-1a
aws ec2 create-subnet --vpc-id $VPCID --cidr-block 10.0.2.0/28 --availability-zone us-east-1a

#aws ec2 describe-subnets --query Subnets[].SubnetId
aws ec2 create-tags --resources \
 $(aws ec2 describe-subnets --output json --query Subnets[0].SubnetId | sed -e 's/\"//g') --tags Key=Name,Value=public

aws ec2 create-tags --resources  \
$(aws ec2 describe-subnets --output json --query Subnets[1].SubnetId | sed -e 's/\"//g') --tags Key=Name,Value=private


#############################
### for public subnet
# creating internet gateway
aws ec2 create-internet-gateway

# attach internet gateway to VPC
aws ec2 attach-internet-gateway \
--internet-gateway-id $(aws ec2 describe-internet-gateways --query InternetGateways[0].InternetGatewayId | sed -e 's/\"//g') \
--vpc-id $(aws ec2 describe-vpcs --query Vpcs[0].VpcId | sed -e 's/\"//g')

# create route table
aws ec2 create-route-table --vpc-id $(aws ec2 describe-vpcs --query Vpcs[0].VpcId | sed -e 's/\"//g')
aws ec2 create-tags --resources  \
$(aws ec2 describe-route-tables --query RouteTables[0].RouteTableId | sed -e 's/\"//g') --tags Key=Name,Value=public

# add internet gateway rule
aws ec2 create-route \
--route-table-id $(aws ec2 describe-route-tables --query RouteTables[0].RouteTableId | sed -e 's/\"//g') \
--destination-cidr-block 0.0.0.0/0 \
--gateway-id $(aws ec2 describe-internet-gateways --query InternetGateways[0].InternetGatewayId | sed -e 's/\"//g')

# associate route table to public subnet
aws ec2 associate-route-table \
--route-table-id $(aws ec2 describe-route-tables --query RouteTables[0].RouteTableId | sed -e 's/\"//g') \
--subnet-id $(aws ec2 describe-subnets --output json --query Subnets[0].SubnetId | sed -e 's/\"//g')

####################################


#5 –°–æ–∑–¥–∞—Ç—å ‚Äú test-BRdD5U0g3G97 ‚Äù Amazon S3 bucket.
 aws s3api create-bucket --bucket test-BRdD5U0g3G97 --region us-east-1

#test-brdd5u0g3g97
#6 –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CORS –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π Amazon S3 bucket, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å "PUT", POST","DELETE"-–∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ c –¥–æ–º–µ–Ω–∞ ‚Äútest-BRdD5U0g3G97.com‚Äù, –∞ "HEAD", "GET"-–∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.


#7 –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Amazon IAM c –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –∫ ‚Äú‚Ä test-BRdD5U0g3G97‚Äù Amazon S3 bu—Åket –∏ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —Ç–æ–ª—å–∫–æ PUT-–∑–∞–ø—Ä–æ—Å–æ–≤.


#8 –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Amazon RDS(PostgreSQL) c–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äú‚Ä test-db‚Ä ‚Äù –¥–ª—è db-instance-identifier.
### for sequring purposes you should use a variable instead of the real pass or use different secure  way 

aws rds create-db-instance \
--allocated-storage 1 \
--db-instance-class db.t2.micro \
--db-instance-identifier test-db \
--engine postgres \
--master-username master  \
--master-user-password secret99

##    --availability-zone us-east-1a \

##  --engine-version 10.6 \


#9 –°–¥–µ–ª–∞—Ç—å snapshot –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ Amazon RDS.
aws rds create-db-snapshot \
    --db-instance-identifier test-db \
    --db-snapshot-identifier test-dbsnapshot

echo "# 10–°–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä Amazon RDS c–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äú‚Ä test-db-restore‚Ä ‚Äù –¥–ª—è db-instance-identifier –∏ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ snapshot(–ø—É–Ω–∫—Ç 9)."

aws rds restore-db-instance-from-db-snapshot \
    --db-instance-identifier test-db-restore \
    --db-snapshot-identifier test-dbsnapshot


echo "#11 –£–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ Amazon RDS-–∏–Ω—Å—Ç–∞–Ω—Å—ã."
aws rds delete-db-instance --db-instance-identifier test-db-restore --skip-final-snapshot
aws rds delete-db-instance --db-instance-identifier test-db --skip-final-snapshot

aws rds delete-db-snapshot  --db-snapshot-identifier test-dbsnapshot
### !!! you have to  delete automated snapshots which was created by RDS


#12 –°–æ–∑–¥–∞—Ç—å Amazon Security Group, —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ 80 –ø–æ—Ä—Ç—É –¥–ª—è –≤—Å–µ—Ö, –∞ –∫ 22 –ø–æ—Ä—Ç—É —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—à–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞.

aws ec2 create-security-group --group-name test --description "testgroup" \
--vpc-id $(aws ec2 describe-vpcs --query Vpcs[0].VpcId | sed -e 's/\"//g')

aws ec2 authorize-security-group-ingress --group-id \
$(aws ec2 describe-security-groups  --query SecurityGroups[0].GroupId | sed -e 's/\"//g') \
--protocol tcp --port 80 --cidr 0.0.0.0/0  \
--protocol tcp --port 22 --cidr $(dig +short myip.opendns.com @resolver1.opendns.com)/32

###    --ip-permissions IpProtocol=icmp,FromPort=3,ToPort=4,IpRanges='[{CidrIp=0.0.0.0/0}]'

#13 –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Amazon EC2 –≤ –ø—É–±–ª–∏—á–Ω–æ–π subnet –∏ —Å —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≤ –ø—É–Ω–∫—Ç–µ 11 Security Group.

: '
aws opsworks --region us-east-1 create-instance --ami-id  ami-0c46f9f09e3a8c2b5 \
 --stack-id  --layer-ids  --instance-type t2.micro \
--hostname  testweb
'

: '
PUBLIC_SUBNET_ID=$(aws ec2 describe-subnets \
| jq '.Subnets[] | select(contains({Tags: [{Key: "Name"},{Value: "public"}]}) )' | \
grep SubnetId | awk '{print $2}' | sed -e 's/\"//g' | sed -e 's/\,//g')

aws ec2 run-instances --image-id ami-0c46f9f09e3a8c2b5  --count 1 --instance-type t2.micro \
--security-group-ids $(aws ec2 describe-security-groups  --query SecurityGroups[0].GroupId | sed -e 's/\"//g') \
--subnet-id $PUBLIC_SUBNET_ID
'

aws ec2 run-instances --image-id ami-0c46f9f09e3a8c2b5  --count 1 --instance-type t2.micro \
--security-group-ids $(aws ec2 describe-security-groups  --query SecurityGroups[0].GroupId | sed -e 's/\"//g') \
--subnet-id $(aws ec2 describe-subnets \
| jq '.Subnets[] | select(contains({Tags: [{Key: "Name"},{Value: "public"}]}) )' \
| grep SubnetId | awk '{print $2}' | sed -e 's/\"//g' | sed -e 's/\,//g')

## --ssh-key-name  APKAJI6RMM6HGM36HRHQ \
## you should use your ssh key pair

#14 –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ ssh –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É EC2, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å Nginx.
#15 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ 80 –ø–æ—Ä—Ç—É –¥–ª—è EC2 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Nginx.
#16 –£–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π EC2-–∏–Ω—Å—Ç–∞–Ω—Å."

: '
!!!‚Ä ‚Ä –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ
—Ä–µ—Å—É—Ä—Å—ã —Å –≤–∞—à–µ–≥–æ Amazon AWS-–∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à—É—é
—Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–Ω–µ–≥ —Å –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è(–∏–ª–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑)
Amazon Free Tier.
'

exit 0